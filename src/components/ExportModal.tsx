import React, { useState } from 'react';
import { Download, FileText, Table, BarChart3, Calendar } from 'lucide-react';
import { Button } from "./ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "./ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "./ui/dialog";
import { Badge } from "./ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";
import { Checkbox } from "./ui/checkbox";
import { useAppStore } from '../store/useAppStore';
import { formatCurrency } from '../lib/utils';

export function ExportModal() {
  const [selectedFormats, setSelectedFormats] = useState(['pdf']);
  const [selectedData, setSelectedData] = useState(['payoff-plan', 'debt-summary']);
  const { debts, loans, getPayoffTimeline, getTotalDebtBalance, payoffStrategy } = useAppStore();

  const exportFormats = [
    { id: 'pdf', name: 'PDF Report', icon: FileText, description: 'Professional formatted report' },
    { id: 'csv', name: 'CSV Data', icon: Table, description: 'Spreadsheet-friendly data' },
    { id: 'json', name: 'JSON Export', icon: BarChart3, description: 'Developer-friendly format' },
  ];

  const dataTypes = [
    { id: 'payoff-plan', name: 'Debt Payoff Plan', description: 'Complete timeline and strategy' },
    { id: 'debt-summary', name: 'Debt Summary', description: 'Current balances and terms' },
    { id: 'loan-comparison', name: 'Loan Comparisons', description: 'Side-by-side loan analysis' },
    { id: 'spending-analysis', name: 'Spending Analysis', description: 'Transaction categorization' },
    { id: 'health-score', name: 'Financial Health Score', description: 'Assessment and recommendations' },
  ];

  const generatePDFReport = () => {
    const timeline = getPayoffTimeline();
    const totalDebt = getTotalDebtBalance();
    
    // Mock PDF generation (in real app, use libraries like jsPDF)
    const reportContent = `
DEBTTRUTH COACH - DEBT PAYOFF PLAN
Generated: ${new Date().toLocaleDateString()}

=== DEBT SUMMARY ===
Total Debt Balance: ${formatCurrency(totalDebt)}
Monthly Minimum Payments: ${formatCurrency(debts.reduce((sum, debt) => sum + debt.minimumPayment, 0))}
Strategy: ${payoffStrategy.type.charAt(0).toUpperCase() + payoffStrategy.type.slice(1)}
Extra Payment: ${formatCurrency(payoffStrategy.extraPayment)}

=== DEBT BREAKDOWN ===
${debts.map(debt => `
${debt.name}
  Balance: ${formatCurrency(debt.balance)}
  APR: ${debt.apr}%
  Min Payment: ${formatCurrency(debt.minimumPayment)}
  ${debt.isFromPlaid ? '(Connected Account)' : '(Manual Entry)'}
`).join('')}

=== PAYOFF TIMELINE ===
Estimated Payoff: ${timeline.length} months
Total Interest Saved: Calculating...

${timeline.slice(0, 12).map((month, index) => `
Month ${index + 1}: ${formatCurrency(month.totalBalance)} remaining
`).join('')}

=== RECOMMENDATIONS ===
1. Continue with ${payoffStrategy.type} strategy
2. Consider increasing extra payments when possible
3. Avoid taking on new debt
4. Monitor progress monthly

Generated by DebtTruth Coach
https://debttruth-coach.vercel.app
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `debttruth-report-${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const generateCSVData = () => {
    const csvContent = [
      ['Debt Name', 'Balance', 'APR', 'Min Payment', 'Type', 'Source'],
      ...debts.map(debt => [
        debt.name,
        debt.balance,
        debt.apr,
        debt.minimumPayment,
        debt.debtType || 'unknown',
        debt.isFromPlaid ? 'Plaid' : 'Manual'
      ])
    ].map(row => row.join(',')).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `debttruth-data-${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const generateJSONExport = () => {
    const exportData = {
      generated: new Date().toISOString(),
      summary: {
        totalDebt: getTotalDebtBalance(),
        debtCount: debts.length,
        strategy: payoffStrategy,
      },
      debts: debts.map(debt => ({
        ...debt,
        // Remove sensitive IDs for privacy
        id: undefined,
        plaidAccountId: debt.plaidAccountId ? '[REDACTED]' : undefined,
      })),
      loans: loans,
      payoffTimeline: getPayoffTimeline().slice(0, 24), // First 2 years
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `debttruth-export-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleExport = () => {
    selectedFormats.forEach(format => {
      switch (format) {
        case 'pdf':
          generatePDFReport();
          break;
        case 'csv':
          generateCSVData();
          break;
        case 'json':
          generateJSONExport();
          break;
      }
    });
  };

  const toggleFormat = (formatId: string) => {
    setSelectedFormats(prev => 
      prev.includes(formatId) 
        ? prev.filter(id => id !== formatId)
        : [...prev, formatId]
    );
  };

  const toggleDataType = (dataId: string) => {
    setSelectedData(prev => 
      prev.includes(dataId) 
        ? prev.filter(id => id !== dataId)
        : [...prev, dataId]
    );
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Button variant="outline" className="flex items-center gap-2">
          <Download className="h-4 w-4" />
          Export Data
        </Button>
      </DialogTrigger>
      
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Download className="h-5 w-5" />
            Export Your Financial Data
          </DialogTitle>
        </DialogHeader>
        
        <Tabs defaultValue="formats" className="space-y-4">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="formats">Export Formats</TabsTrigger>
            <TabsTrigger value="data">Data Selection</TabsTrigger>
          </TabsList>
          
          <TabsContent value="formats" className="space-y-4">
            <div className="space-y-3">
              {exportFormats.map(format => {
                const Icon = format.icon;
                return (
                  <Card 
                    key={format.id} 
                    className={`cursor-pointer transition-colors ${
                      selectedFormats.includes(format.id) 
                        ? 'ring-2 ring-primary' 
                        : 'hover:bg-muted/50'
                    }`}
                    onClick={() => toggleFormat(format.id)}
                  >
                    <CardContent className="flex items-center gap-3 p-4">
                      <Checkbox 
                        checked={selectedFormats.includes(format.id)}
                        onChange={() => toggleFormat(format.id)}
                      />
                      <Icon className="h-5 w-5" />
                      <div className="flex-1">
                        <div className="font-medium">{format.name}</div>
                        <div className="text-sm text-muted-foreground">{format.description}</div>
                      </div>
                      {format.id === 'pdf' && (
                        <Badge variant="secondary">Recommended</Badge>
                      )}
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </TabsContent>
          
          <TabsContent value="data" className="space-y-4">
            <div className="space-y-3">
              {dataTypes.map(dataType => (
                <Card 
                  key={dataType.id}
                  className={`cursor-pointer transition-colors ${
                    selectedData.includes(dataType.id) 
                      ? 'ring-2 ring-primary' 
                      : 'hover:bg-muted/50'
                  }`}
                  onClick={() => toggleDataType(dataType.id)}
                >
                  <CardContent className="flex items-center gap-3 p-4">
                    <Checkbox 
                      checked={selectedData.includes(dataType.id)}
                      onChange={() => toggleDataType(dataType.id)}
                    />
                    <div className="flex-1">
                      <div className="font-medium">{dataType.name}</div>
                      <div className="text-sm text-muted-foreground">{dataType.description}</div>
                    </div>
                    {(dataType.id === 'spending-analysis' || dataType.id === 'health-score') && (
                      <Badge variant="outline">Requires Bank Connection</Badge>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
        
        {/* Export Summary */}
        <Card className="border-dashed">
          <CardHeader>
            <CardTitle className="text-base">Export Summary</CardTitle>
            <CardDescription>What will be included in your export</CardDescription>
          </CardHeader>
          <CardContent className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span>Formats:</span>
              <span>{selectedFormats.length} selected</span>
            </div>
            <div className="flex justify-between">
              <span>Data Types:</span>
              <span>{selectedData.length} selected</span>
            </div>
            <div className="flex justify-between">
              <span>Debts:</span>
              <span>{debts.length} accounts</span>
            </div>
            <div className="flex justify-between">
              <span>Loans:</span>
              <span>{loans.length} comparisons</span>
            </div>
          </CardContent>
        </Card>
        
        {/* Export Button */}
        <div className="flex gap-3">
          <Button 
            onClick={handleExport} 
            disabled={selectedFormats.length === 0}
            className="flex-1"
          >
            <Download className="h-4 w-4 mr-2" />
            Export Selected Data
          </Button>
          <Button variant="outline">
            <Calendar className="h-4 w-4 mr-2" />
            Schedule Export
          </Button>
        </div>
        
        {/* Privacy Notice */}
        <div className="text-xs text-muted-foreground bg-muted/30 p-3 rounded-lg">
          <strong>Privacy Notice:</strong> Exported data is generated locally in your browser. 
          Sensitive account identifiers are redacted for security. No data is sent to external servers.
        </div>
      </DialogContent>
    </Dialog>
  );
}
